# Docker Compose 最佳实践与示例

本文档总结了编写高效、安全且可扩展的 Docker Compose 文件的最佳实践，并提供运行 Spring Boot 后端、React 前端和 PostgreSQL 数据库的示例，基于 [Docker 官方文档](https://docs.docker.com/compose/)，适合导入 RAG 知识库。

## 最佳实践

1. **版本控制**  
   将 `docker-compose.yml` 纳入 Git，与代码保持一致，便于协作和版本追踪。

2. **清晰定义服务**  
   使用明确的服务名称（如 `backend`、`frontend`、`db`），确保职责清晰。

3. **使用环境变量**  
   通过 `.env` 文件或环境变量配置敏感信息（如数据库凭据），避免硬编码。

4. **管理依赖关系**  
   使用 `depends_on` 确保服务按正确顺序启动，如后端依赖数据库。

5. **数据持久化**  
   使用命名卷（如 `db_data`）存储持久化数据，便于移植。

6. **设置资源限制**  
   配置 CPU 和内存限制，防止资源耗尽。例如：
   ```yaml
   resources:
     limits:
       cpus: '0.5'
       memory: 512M
   ```

7. **自定义网络**  
   定义网络（如 `backend`、`frontend`）隔离服务通信，增强安全性。

8. **组织配置文件**  
   保持文件结构清晰，大型项目可拆分为多个 Compose 文件并用 `include` 合并。

9. **使用最新版本**  
   指定最新 Compose 版本（如 `3.8`），确保兼容性和功能支持。

10. **避免使用 `links`**  
    使用自定义网络代替已弃用的 `links`，服务名称自动解析为主机名。

## 示例

### 项目结构
```
project/
├── backend/
│   ├── Dockerfile
│   └── target/your spring-boot-app.jar
├── frontend/
│   ├── Dockerfile
│   └── build/
└── docker-compose.yml
```

### Docker Compose 配置
```yaml
version: '3.8'

services:
  db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend

  backend:
    build: ./backend
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/mydb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      - db
    networks:
      - backend
      - frontend

  frontend:
    build: ./frontend
    ports:
      - "80:80"
    networks:
      - frontend

networks:
  backend:
  frontend:

volumes:
  db_data:
```
**说明**：
- **版本**：使用 `3.8`，兼容最新功能。
- **服务**：
  - **db**：PostgreSQL 14，数据存储在 `db_data` 卷，连接 `backend` 网络。
  - **backend**：构建自 `backend/`（需包含 Spring Boot Dockerfile），依赖 `db`，连接 `backend` 和 `frontend` 网络。
  - **frontend**：构建自 `frontend/`（需包含 React Dockerfile），暴露 80 端口，连接 `frontend` 网络。
- **网络**：`backend` 隔离数据库通信，`frontend` 支持前后端交互。
- **卷**：`db_data` 确保数据库数据持久化。
- **运行**：
  - 构建并启动：`docker-compose up --build`
  - 停止并清理：`docker-compose down`
  - 访问：后端 `http://localhost:8080`，前端 `http://localhost`

## 配置注意事项
- **Spring Boot**：配置 `application.properties` 使用环境变量：
  ```properties
  spring.datasource.url=${SPRING_DATASOURCE_URL}
  spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
  spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
  ```
- **React**：设置 API 基础 URL（如 `REACT_APP_API_BASE_URL=http://localhost:8080/api`）在 `.env` 或构建时配置。
- **安全性**：生产环境中，使用强密码并通过 Docker 机密管理敏感信息。
- **环境变量文件**：可创建 `.env` 文件存储配置，如：
  ```env
  POSTGRES_USER=user
  POSTGRES_PASSWORD=password
  POSTGRES_DB=mydb
  ```

## 适用场景
- **开发环境**：快速启动全栈应用，测试前后端和数据库集成。
- **生产环境**：通过资源限制、网络隔离和秘密管理适配生产需求。
- **CI/CD**：结合 GitHub Actions 自动化构建和部署。

## 参考资源
- [Docker Compose 官方文档](https://docs.docker.com/compose/)
- [Spring Boot 和 React 示例](https://www.callicoder.com/spring-boot-mysql-react-docker-compose-example/)
- [Docker Compose 文件参考](https://docs.docker.com/reference/compose-file/)