service_inference_database_task:
  description: >
    Analyze the structured dependency analysis provided by the 'project_dependency_analyst' agent ({dependencies_analysis}) and the project's source and configuration files referenced by their **absolute paths** ({project_files_path}).
    Identify all required database services (e.g., MySQL, PostgreSQL, MongoDB), their inferred versions, and extract key connection parameters (such as port, default database name, username patterns, configuration file locations) by examining the content found at the provided **absolute paths**. This analysis should be applicable to projects written in **any programming language**, inferring requirements based on project files and dependencies regardless of the specific language or framework used.
    You MUST use the information derived from the structured analysis and, critically, the actual file contents read using their **absolute paths** to perform this inference.
    Output the inferred database service requirements in a structured format.
  expected_output: >
    A structured list of all required database services, including type, version, port, database name, username, and other relevant parameters.
  agent: service_inference_database_agent

service_inference_message_queue_task:
  description: >
    Analyze the structured dependency analysis provided by the 'project_dependency_analyst' agent ({dependencies_analysis}) and the project's source and configuration files referenced by their **absolute paths** ({project_files_path}).
    Identify all required message queue services (e.g., RabbitMQ, Kafka, ActiveMQ), their inferred versions, and extract key connection parameters (such as port, authentication mechanisms, cluster mode requirements, configuration file locations) by examining the content found at the provided **absolute paths**. This analysis should be applicable to projects written in **any programming language**, inferring requirements based on project files and dependencies regardless of the specific language or framework used.
    You MUST use the information derived from the structured analysis and, critically, the actual file contents read using their **absolute paths** to perform this inference.
    Output the inferred message queue service requirements in a structured format.
  expected_output: >
    A structured list of all required message queue services, including type, version, port, authentication, cluster mode, and other relevant parameters.
  agent: service_inference_message_queue_agent

service_inference_cache_task:
  description: >
    Analyze the structured dependency analysis provided by the 'project_dependency_analyst' agent ({dependencies_analysis}) and the project's source and configuration files referenced by their **absolute paths** ({project_files_path}).
    Identify all required caching services (e.g., Redis, Memcached), their inferred versions, and extract key parameters (such as port, authentication requirements, clustering setup) by examining the content found at the provided **absolute paths**. This analysis should be applicable to projects written in **any programming language**, inferring requirements based on project files and dependencies regardless of the specific language or framework used.
    You MUST use the information derived from the structured analysis and, critically, the actual file contents read using their **absolute paths** to perform this inference.
    Output the inferred caching service requirements in a structured format.
  expected_output: >
    A structured list of all required caching services, including type, version, port, authentication, and other relevant parameters.
  agent: service_inference_cache_agent

service_inference_custom_task:
  description: >
    Analyze the structured dependency analysis provided by the 'project_dependency_analyst' agent ({dependencies_analysis}) and the project's source and configuration files referenced by their **absolute paths** ({project_files_path}).
    If you don't know the service, you can use the network search tool to search the service.
    Identify any additional, non-standard, or custom external services (e.g., Elasticsearch, MinIO, external APIs, file storage, identity providers, etc.) required by the project, infer their versions, and extract key parameters (such as port, authentication mechanisms, URLs, relevant configuration details) by examining the content found at the provided **absolute paths**. This analysis should be applicable to projects written in **any programming language**, inferring requirements based on project files and dependencies regardless of the specific language or framework used.
    You MUST use the information derived from the structured analysis and, critically, the actual file contents read using their **absolute paths** to perform this inference.
    Additionally, infer any required **runtime environment versions** (e.g., JDK version for Java, Node.js version for JavaScript, Python version for Python) based on the project's dependencies and configuration found via the context.
    Output all inferred requirements in a structured format as described in the expected output.
  expected_output: >
    A structured list of all required custom or specialized services, including type, version, port, authentication, and other relevant parameters.
  agent: service_inference_custom_agent

conclusion_task:
  description: >
    Summarize the results of the service inference process, including all identified services (databases, message queues, caches, custom services) and their parameters.
    Ensure that the summary is clear and structured for easy integration into the final deployment configuration.
  expected_output: >
    A comprehensive summary of all identified services, including type, version, port, authentication, and other relevant parameters.
  agent: conclusion_agent